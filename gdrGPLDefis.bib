@book{leroy:hal-02370113,
  TITLE = {{Le logiciel, entre l'esprit et la mati{\`e}re}},
  AUTHOR = {Leroy, Xavier},
note = {\url{https://hal.inria.fr/hal-02370113}},
  PUBLISHER = {{Fayard}},
  SERIES = {Le{\c c}ons inaugurales du Coll{\`e}ge de France},
  VOLUME = {284},
  YEAR = {2019},
  MONTH = Apr,
  HAL_ID = {hal-02370113},
  HAL_VERSION = {v1},
}

@unpublished{sansBug,
author = {Gabriel Scherer},
pages = {1--3},
year = {2020},
note = {Défis du GDR GPL},
title = {{Permettre la programmation sans bugs}}
}

@unpublished{GLE,
author = {Anquetil, Nicolas and Etien, Anne and Falleri, Jean-R{\'{e}}my and Urtado, Christelle},
pages = {1--4},
year = {2020},
note = {Défis du GDR GPL},
title = {{Vers plus de fiabilit{\'{e}} sur les r{\'{e}}sultats de recherche en g{\'{e}}nie logiciel}}
}

@unpublished{vert,
author = {Goa{\"{e}}r, Olivier Le and Noureddine, Adel and Barbier, Franck and Rouvoy, Romain and Maraninchi, Florence},
pages = {1--5},
year = {2020},
note = {Défis du GDR GPL},
title = {{Vers des Logiciels éco-responsables,  Le génie logiciel au défi de la sobriété écologique}}
}
@unpublished{combinatoire,
author = {Giorgetti, Alain and Magaud, Nicolas},
pages = {1--5},
year = {2020},
note = {Défis du GDR GPL},
title = {{Combinatoire certifiée}},
url = {https://gdrgpl.myxwiki.org/xwiki/bin/download/Main/WebHome/combinatoire{\_}certifiee.pdf?rev=1.1}
}
@unpublished{debuggers,
author = {Costiou, Steven and Dupriez, Thomas and Ducasse, St{\'{e}}phane},
pages = {1--4},
note = {Défis du GDR GPL},
title = {{New Generation Debuggers}}
}
@unpublished{securite,
author = {{Equipe Archware/IRISA}},
pages = {1--6},
year = {2020},
note = {Défis du GDR GPL},
title = {{La sécurité dans le développement logiciel}}
}
@unpublished{coevolution,
author = {Khelladi, Djamel E. and Barais, Olivier and Combemale, Beno{\^{i}}t and Acher, Mathieu and Blouin, Arnaud and Bourcier, Johann and Plouzeau, Noel and J{\'{e}}z{\'{e}}quel, Jean-Marc},
pages = {1--3},
year = {2020},
note = {Défis du GDR GPL},
title = {{Gestion de la co-évolution des logiciels partiellement générés pendant la phase d'évolution et de maintenance}}
}
@unpublished{compilation,
author = {Collange, Caroline and Gonnord, Laure and Henrio, Ludovic},
pages = {1--6},
year = {2020},
note = {Défis du GDR GPL},
title = {{Défi en compilation et langages: du parallélisme oui, mais du parallélisme efficace et sûr!}}
}
@unpublished{reconfiguration,
author = {Bliudze, Simon and Quinton, Cl{\'{e}}ment and Coullon, H{\'{e}}l{\`{e}}ne and Ledoux, Thomas and Henrio, Ludovic and Rutten, Eric and Ameur-Boulifa, Rabea and Baude, Fran{\c{c}}oise and Noureddine, Adel and Exposito, Ernesto and Aniorte, Philippe and Acher, Mathieu and Ziadi, Tewfik},
pages = {1--10},
year = {2020},
note = {Défis du GDR GPL},
title = {{Safe and optimal component-based dynamic reconfiguration}}
}
@unpublished{argumentation,
author = {Bruel, Jean-Michel and Delmas, R{\'{e}}mi and Laleau, R{\'{e}}gine and Polacsek, Thomas and Sedes, Florence},
pages = {1--4},
year = {2020},
note = {Défis du GDR GPL},
title = {{Quelle argumentation pour des systèmes de confiance ?}}
}
@unpublished{IA,
author = {Bouziane, H.-L. and Delahaye, D. and Dony, C. and Huchard, M. and Nebut, C. and Reitz, P. and Seriai, A.-D. and Tibermacine, C. and Etien, A. and Anquetil, N. and Urtado, C. and Vauttier, S. and Falleri, J.-R. and du Bousquet, L. and Alloui, I. and Vernier, F.},
pages = {1--8},
year = {2020},
note = {Défis du GDR GPL},
title = {Génie Logiciel et Intelligence Artificielle}}
}
@unpublished{Monniaux,
author = {Monniaux, David},
pages = {1--4},
year = {2020},
note = {Défis du GDR GPL},
title = {{Cha\^{i}ne de compilation formellement certifiée}}
}
@unpublished{emergents,
author = {Conchon, Sylvain and Hurault, Aur{\'{e}}lie  and Chapoutot, Alexandre and Garoche, Pierre-Lo{\"{i}}c and Idani, Akram and Pouzet, Marc and Martel, Matthieu},
pages = {1--7},
year = {2020},
note = {Défis du GDR GPL},
title = {{Méthodes formelles pour la conception, la programmation et la vérification de systèmes critiques émergents}}
}

@article{collet:hal-01345654,
  TITLE = {{D{\'e}fis 2025}},
  AUTHOR = {Collet, Philippe and Du Bousquet, Lydie and Duchien, Laurence and Moreau, Pierre-Etienne},
  note = {\url{https://hal.archives-ouvertes.fr/hal-01345654v1}},
  JOURNAL = {{Revue des Sciences et Technologies de l'Information - S{\'e}rie TSI : Technique et Science Informatiques}},
  PUBLISHER = {{Lavoisier}},
  VOLUME = {34},
  NUMBER = {3},
  PAGES = {311-324},
  YEAR = {2015},
  DOI = {10.3166/TSI.34.293-306},
  HAL_ID = {hal-01345654},
  HAL_VERSION = {v1},
}

@article{duchien:hal-00712942,
  TITLE = {{D{\'e}fis pour le G{\'e}nie de la Programmation et du Logiciel GDR CNRS GPL}},
  AUTHOR = {Duchien, Laurence and Ledru, Yves},
note = {\url{https://hal.inria.fr/hal-00712942}},
  JOURNAL = {{Revue des Sciences et Technologies de l'Information - S{\'e}rie TSI : Technique et Science Informatiques}},
  PUBLISHER = {{Lavoisier}},
  VOLUME = {31},
  NUMBER = {3},
  PAGES = {397-413},
  YEAR = {2012},
  MONTH = Mar,
  PDF = {https://hal.inria.fr/hal-00712942/file/chronique_DEFI_GDR_GPL-v3.pdf},
  HAL_ID = {hal-00712942},
  HAL_VERSION = {v1},
}



@misc{Manifeste,
mendeley-groups = {GDR GPL DEFIS},
author = {GDR GPL},
title = {{Manifeste GL}},
note = {\url{{https://gl.frama.io/manifeste/}} },
urldate = {6/5/2020},
year = {2019}
}

@misc{CoNRS2019,
author = {CoNRS},
mendeley-groups = {GDR GPL DEFIS},
pages = {1--18},
title = {{Rapport de conjoncture - Section 6 du Comit{\'{e}} national de la recherche scientifique}},
year = {2019}
}

@misc{Nederland2019,
author = {VEReniging Software Engineering Nederland},
mendeley-groups = {GDR GPL DEFIS},
title = {{Manifesto on Software Research and Education in the Netherlands}},
note = {\url{https://versen.nl/contents/manifesto}},
urldate = {mai 2020},
year = {2019}
}

@article{DBLP:journals/sigcse/Gurer02,
  author    = {Denise W. G{\"{u}}rer},
  title     = {Women in computing history},
  journal   = {{ACM} {SIGCSE} Bull.},
  volume    = {34},
  number    = {2},
  pages     = {116--120},
  year      = {2002},
  note = {\url{https://doi.org/10.1145/543812.543843}},
  doi       = {10.1145/543812.543843},
  timestamp = {Sat, 25 Apr 2020 13:49:44 +0200},
  biburl    = {https://dblp.org/rec/journals/sigcse/Gurer02.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@ARTICLE{50Years,
  author={H. {Erdogmus} and N. {Medvidović} and F. {Paulisch}},
  journal={IEEE Software}, 
  title={50 Years of Software Engineering}, 
  year={2018},
  volume={35},
  number={5},
  pages={20-24},}
  
  @ARTICLE{Hamilton18,
  author={M. H. {Hamilton}},
  journal={IEEE Software}, 
  title={What the Errors Tell Us}, 
  year={2018},
  volume={35},
  number={5},
  pages={32-37},}
  
  @ARTICLE{Broy18,
  author={M. {Broy}},
  journal={IEEE Software}, 
  title={Yesterday, Today, and Tomorrow: 50 Years of Software Engineering}, 
  year={2018},
  volume={35},
  number={5},
  pages={38-43},}

@inproceedings{Chandra2020,
abstract = {While machine learning has the potential to fundamentally improve how software is constructed, opportunities to leverage machine learning to improve conventional developer tools have gone untapped in practice. At Facebook, our developer infrastructure team is on a mission to rethink and retool Facebook's developer toolchain by applying machine learning at every layer in our stack. Our goal is to make our developers more productive, and our processes and infrastructure more efficient, by integrating ML into our programming languages and developer tools, including IDEs, version control, or continuous integration systems, in novel ways. This talk will describe some of the work our team has been doing to improve developer efficiency and resource utilization at Facebook. I'll also touch upon future opportunities we see to optimize or auto-tune other common pieces of developer infrastructure.},
author = {Chandra, Satish},
booktitle = {ICSE2020/ MSR 2020 Online Mining Software Repositories Conference},
title = {{Keynote : Machine Learning for Developer Productivity at Facebook}},
note = {\url{ https://2020.msrconf.org/track/msr-2020-Keynote?track=MSR Keynote#program}},
year = {2020}
}

@ARTICLE{murphy19,
  author={E. {Murphy-Hill} and C. {Jaspan} and C. {Sadowski} and D. {Shepherd} and M. {Phillips} and C. {Winter} and A. {Knight} and E. {Smith} and M. {Jorde}},
  journal={IEEE Transactions on Software Engineering}, 
  title={What Predicts Software Developers' Productivity?}, 
  year={2019},
  volume={},
  number={},
  pages={1-1},}
  
  @article{yu2019characterizing,
  title={Characterizing the Usage, Evolution and Impact of Java Annotations in Practice},
  author={Yu, Zhongxing and Bai, Chenggang and Seinturier, Lionel and Monperrus, Martin},
  journal={IEEE Transactions on Software Engineering},
  year={2019},
  publisher={IEEE}
}

@misc{Marques2019,
author = {Marques, Ma{\'{i}}ra and Simmonds, Jocelyn and Rossel, Pedro O. and Bastarrica, Mar{\'{i}}a Cecilia},
booktitle = {Information and Software Technology},
doi = {10.1016/j.infsof.2018.08.014},
issn = {09505849},
keywords = {Evolution,Software product line,Software reuse,Systematic literature review},
month = {jan},
pages = {190--208},
publisher = {Elsevier B.V.},
title = {{Software product line evolution: A systematic literature review}},
volume = {105},
year = {2019}
}


@article{Carbonnel2020,
abstract = {Software Product Line Engineering (SPLE) is a set of methods to help build a collection of software systems which are similar enough to enable appropriate artefact reuse. An important task consists in documenting in variability models the common and variable features which may compose the similar software systems along with compatibility constraints between these features. Several models and formalisms have been proposed to model variability: each one of them has specific properties making it pertinent to support certain management operations, which are of primary importance in SPLE. Switching from one kind of variability model to another is thus important to benefit from a wide range of operations and efficiently manage a software product line. In this paper, we review the various approaches proposed to manage and organise features and product configurations (a product configuration being a chosen subset of features). We discuss the originality of concept lattices, canonical structures presenting a dual view on features and configurations, and the advantages to use these structures as variability representations. Switching from existing variability models to an equivalent concept lattice raises scaling issues related to the size of the needed input dataset and thus hinders their exploitation. We propose an alternative relying on implicative systems and define a transformation method which does not suffer from scaling issues.},
author = {Carbonnel, Jessie and Bertet, Karell and Huchard, Marianne and Nebut, Cl{\'{e}}mentine},
doi = {10.1016/j.dam.2019.06.008},
issn = {0166218X},
journal = {Discrete Applied Mathematics},
keywords = {Concept lattice,Feature model,Formal concept analysis,Software product line},
month = {feb},
pages = {43--64},
publisher = {Elsevier B.V.},
title = {{FCA for software product line representation: Mixing configuration and feature relationships in a unique canonical representation}},
volume = {273},
year = {2020}
}

@article{Quinton2020,
abstract = {Many software systems today provide support for adaptation and reconfiguration at runtime, in response to changes in their environment. Such adaptive systems are designed to run continuously and may not be shut down for reconfiguration or maintenance tasks. The variability of such systems has to be explicitly managed, together with mechanisms that control their runtime adaptation and reconfiguration. Dynamic software product lines (DSPLs) can help to achieve this. However, dealing with evolution is particularly challenging in a DSPL, as changes made at runtime can easily lead to inconsistencies. This paper describes the challenges of evolving DSPLs using an example cyber-physical system for home automation. We discuss the shortcomings of existing work and present a reference architecture to support DSPL evolution. To demonstrate its feasibility and flexibility, we implemented the proposed reference architecture for two different DSPLs: the aforementioned cyber-physical system, which uses feature models to describe its variability, and a runtime monitoring infrastructure, which is based on decision models. To assess the industrial applicability of our approach, we also implemented the reference architecture for a real-world DSPL, an automation software system for injection molding machines. Our results provide evidence on the flexibility, performance, and industrial applicability of our approach.},
author = {Quinton, Cl{\'{e}}ment and Vierhauser, Michael and Rabiser, Rick and Baresi, Luciano and Gr{\"{u}}nbacher, Paul and Schuhmayer, Christian},
doi = {10.1002/smr.2293},
issn = {2047-7473},
journal = {Journal of Software: Evolution and Process},
keywords = {consistency,dynamic software product lines,evolution},
month = {jun},
publisher = {John Wiley and Sons Ltd},
title = {{Evolution in dynamic software product lines}},
note = {\url{https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2293}},
year = {2020}
}
